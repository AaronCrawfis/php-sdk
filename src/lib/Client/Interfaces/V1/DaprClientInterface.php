<?php

/**
 * This file is automatically generated by `composer build-grpc`
 */

namespace Dapr\Client\Interfaces\V1;

/**
 * Dapr service provides APIs to user application to access Dapr building blocks.
 */
interface DaprClientInterface
{
    /**
     * Invokes a method on a remote Dapr app.
     *
     * @param InvokeServiceRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function InvokeService(InvokeServiceRequestInterface $argument, $metadata = [], $options = []);


    /**
     * Gets the state for a specific key.
     *
     * @param GetStateRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return GetStateResponseInterface
     */
	public function GetState(GetStateRequestInterface $argument, $metadata = [], $options = []): GetStateResponseInterface;


    /**
     * Gets a bulk of state items for a list of keys
     *
     * @param GetBulkStateRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return GetBulkStateResponseInterface
     */
	public function GetBulkState(GetBulkStateRequestInterface $argument, $metadata = [], $options = []): GetBulkStateResponseInterface;


    /**
     * Saves the state for a specific key.
     *
     * @param SaveStateRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function SaveState(SaveStateRequestInterface $argument, $metadata = [], $options = []);


    /**
     * Deletes the state for a specific key.
     *
     * @param DeleteStateRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function DeleteState(DeleteStateRequestInterface $argument, $metadata = [], $options = []);


    /**
     * Deletes a bulk of state items for a list of keys
     *
     * @param DeleteBulkStateRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function DeleteBulkState(DeleteBulkStateRequestInterface $argument, $metadata = [], $options = []);


    /**
     * Executes transactions for a specified store
     *
     * @param ExecuteStateTransactionRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function ExecuteStateTransaction(
		ExecuteStateTransactionRequestInterface $argument,
		$metadata = [],
		$options = []
	);


    /**
     * Publishes events to the specific topic.
     *
     * @param PublishEventRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function PublishEvent(PublishEventRequestInterface $argument, $metadata = [], $options = []);


    /**
     * Invokes binding data to specific output bindings
     *
     * @param InvokeBindingRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return InvokeBindingResponseInterface
     */
	public function InvokeBinding(InvokeBindingRequestInterface $argument, $metadata = [], $options = []): InvokeBindingResponseInterface;


    /**
     * Gets secrets from secret stores.
     *
     * @param GetSecretRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return GetSecretResponseInterface
     */
	public function GetSecret(GetSecretRequestInterface $argument, $metadata = [], $options = []): GetSecretResponseInterface;


    /**
     * Gets a bulk of secrets
     *
     * @param GetBulkSecretRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return GetBulkSecretResponseInterface
     */
	public function GetBulkSecret(GetBulkSecretRequestInterface $argument, $metadata = [], $options = []): GetBulkSecretResponseInterface;


    /**
     * Register an actor timer.
     *
     * @param RegisterActorTimerRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function RegisterActorTimer(RegisterActorTimerRequestInterface $argument, $metadata = [], $options = []);


    /**
     * Unregister an actor timer.
     *
     * @param UnregisterActorTimerRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function UnregisterActorTimer(UnregisterActorTimerRequestInterface $argument, $metadata = [], $options = []);


    /**
     * Register an actor reminder.
     *
     * @param RegisterActorReminderRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function RegisterActorReminder(RegisterActorReminderRequestInterface $argument, $metadata = [], $options = []);


    /**
     * Unregister an actor reminder.
     *
     * @param UnregisterActorReminderRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function UnregisterActorReminder(
		UnregisterActorReminderRequestInterface $argument,
		$metadata = [],
		$options = []
	);


    /**
     * Gets the state for a specific actor.
     *
     * @param GetActorStateRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function GetActorState(GetActorStateRequestInterface $argument, $metadata = [], $options = []);


    /**
     * Executes state transactions for a specified actor
     *
     * @param ExecuteActorStateTransactionRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function ExecuteActorStateTransaction(
		ExecuteActorStateTransactionRequestInterface $argument,
		$metadata = [],
		$options = []
	);


    /**
     * InvokeActor calls a method on an actor.
     *
     * @param InvokeActorRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function InvokeActor(InvokeActorRequestInterface $argument, $metadata = [], $options = []): InvokeActorResponseInterface;


    /**
     * Gets metadata of the sidecar
     *
     * @param GPBEmptyInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function GetMetadata(GPBEmptyInterface $argument, $metadata = [], $options = []);


    /**
     * Sets value in extended metadata of the sidecar
     *
     * @param SetMetadataRequestInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function SetMetadata(SetMetadataRequestInterface $argument, $metadata = [], $options = []);


    /**
     * Shutdown the sidecar
     *
     * @param GPBEmptyInterface $argument input argument
     * @param array $metadata metadata
     * @param array $options call options
     *
     * @return \Grpc\UnaryCall
     */
	public function Shutdown(GPBEmptyInterface $argument, $metadata = [], $options = []);
}
