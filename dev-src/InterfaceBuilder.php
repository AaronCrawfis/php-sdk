<?php

namespace Dapr\Dev;

use Dapr\Proto\Runtime\V1\DaprClient;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;

/**
 * Class InterfaceBuilder
 * @package Dapr\Dev
 */
class InterfaceBuilder
{
    public string $generated_namespace;
    public string $generated_interface;

    public function __construct(public string $class)
    {
    }

    public static function build_interfaces(): void
    {
        $builder = new InterfaceBuilder(DaprClient::class);
        $builder->write_interface($builder->build());
    }

    public function write_interface(PhpFile $file): string {
        file_put_contents(__DIR__.'/../src/lib/Client/Interfaces/V1/'.$this->generated_interface.'.php', $file);
        return $this->generated_namespace.'\\'.$this->generated_interface;
    }

    public function build(): PhpFile
    {
        $class = ClassType::from($this->class);
        $class->setInterface();
        $class->setImplements([]);
        $class->setFinal(false);
        $class->removeMethod('__construct');
        foreach ($class->getMethods() as $method) {
            foreach ($method->getParameters() as $parameter) {
                $parameter->setType($this->maybe_generate_type($parameter->getType()));
            }
            $method->setBody(null);
        }
        foreach ($class->getProperties() as $property) {
            $class->removeProperty($property->getName());
        }
        $this->generated_interface = $class->getName().'Interface';
        $class->setName($this->generated_interface);
        $class->setExtends([]);

        $file = new PhpFile();
        $file->addComment('This file is automatically generated by `composer build-grpc`');
        $this->generated_namespace = 'Dapr\Client\Interfaces\V1';
        $namespace                 = $file->addNamespace($this->generated_namespace);
        $namespace->add($class);

        return $file;
    }

    private function maybe_generate_type(string|null $type): string|null
    {
        if ($type === null) {
            return null;
        }
        $types     = array_filter(explode('|', $type));
        $new_types = [];
        foreach ($types as $type) {
            if ( ! class_exists($type)) {
                $new_types[] = $type;
                continue;
            }
            $builder = new InterfaceBuilder($type);
            $file    = $builder->build();
            $new_types[] = $builder->write_interface($file);
        }

        return implode('|', $new_types);
    }
}
